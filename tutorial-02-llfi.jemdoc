# jemdoc: menu{MENU}{tutorial-02-llfi.html}
= LLFI: LLVM-based Fault Injection Tool

== About
This tutorial targets to provide a consise instruction on using LLFI to perform fault injection experiments.
Also, it is used in UIowa:CS:4980:0002, Topics in Computer Science II: Dependable System Design instructed by Dr. [https://homepage.divms.uiowa.edu/~guanpli/index.html Guanpeng Li]).
The main contents of this tutorial are shown as below:
- How to install LLFI?
- What is LLFI? Why we use it?
- How to use LLFI?

== LLFI Quick Installation
Before you install LLFI, make sure your environment has +python3+ and its package +pyyaml+. For +pyyaml+, version 4x is okay and 4.2b1 is highly recommended.
Other dependencies can be found at \[[https://github.com/DependableSystemsLab/LLFI 1]\].
~~~
{Following commands show how to install LLFI on a Ubuntu 16.04 machine.}{pyint}
$ git clone https://github.com/DependableSystemsLab/LLFI.git                           # download LLFI repository
$ cd LLFI/installer                                                                    # change directory to quick installation folder
$ python3 InstallLLFI.py --noGUI                                                       # quickly install command-line-version LLFI with python driver
~~~
+python3 InstallLLFI.py \-\-noGUI+ contains building LLVM, so it might be slow.
If you want to speed up this process, please replace *InstallLLFI.py:line 328* with +p = subprocess.call(\[\"make\", \"-j16\"\])+. 
"16" indicates the maximum thread number per user in your OS. You can use command +nproc+ to check it out.
~~~
{Setting up local environment for LLFI}{pyint}
$ echo "export PATH=YOUR-LOCAL-PATH/LLFI/installer/llfi/bin:\$PATH" >> ~/.bashrc       # adding LLFI executable binary path variables to local environment
$ source ~/.bashrc                                                                     # activate environment
~~~
~~~
{Checking if installation is successful.}{pyint}
$ cd $YOUR-LOCAL-PATH$/LLFI/installer/llfi/bin && ls                                   # list all compiled LLFI executable binaries
batchInjectfault  batchProfile  cmake_install.cmake      injectfault       instrument  Makefile  SoftwareFailureAutoScan
batchInstrument   CMakeFiles    HardwareFailureAutoScan  InjectorAutoScan  llfi-gui    profile
$ # It indicates LLFI is successfully installed to your machine :)
~~~

== LLFI
LLFI (Low-Level Fault Injector) is an LLVM based fault injection tool, which injects faults into the LLVM IR (human-readable one) of a specified program.
LLFI is mainly implemented by several LLVM 3.4 passes and driven by python script.
The fault injection (FI) campaign of LLFI is defined by +input.yaml+ and very flexible.

We have already known FI is commonly used for testing program resiliency against soft errors. But why we use LLFI? (or why we injection faults on LLVM IR) There are several reasons:
- Hardware FI is hard to pinpoint a certain location (imagine you want to flip a certain bit in a hardware device \>\_\<). The analysis is also very hard in hardware. Beam test is even radio active.
- Architecture FI can be conducted by simulator, but it is very slow. Some architecture designs (such as Intel) are not publicly available, making it hard to develop simulator.
- Thus, application-level FI is flexible and easy to develop and post-analyze. Besides, Wei et al \[[http://blogs.ubc.ca/karthik/files/2014/04/DSN-Jiesheng.pdf 2]\] have demonstrated FIs on binary (PINFI) and LLVM (LLFI) can produce similar results.
- In LLVM-level FIs, because of its Optimizer and standard IR, we can easily perform a lot of code transformations and program analysis by developing LLVM Passes. Here tracking error propagation is also possible.

To use LLFI, there are three major steps. We use pathfinder from Rodinia benchmark suite \[[http://www.cs.virginia.edu/rodinia/doku.php 3]\] for example.
~~~
{1. Instrumentation: instrumenting functional code in given program IR}{pyint}
$ # command example
$ # note that you should have LLFI configure file called input.yaml in the same path before you run this command.
$ # details can be found in LLFI Usage section.
$ instrument --readable pathfinder.ll       
~~~
~~~
{2. Profile: a fault-free program execution}{pyint}
$ # command example
$ # note that this command should be executed after "instrument"
$ profile ./llfi/pathfinder-profiling.exe 1000 10                                      # "1000 10" is the program input of pathfinder 
~~~
~~~
{3. Fault Injection: program executions with faults}{pyint}
$ # command example
$ # note that this command should be executed after "profile"
$ injectfault ./llfi/pathfinder-faultinjection.exe 1000 10                             # "1000 10" is the program input of pathfinder 
~~~


== LLFI Usage

=== Preprocess and Compile

=== Per-Instruction FI

=== Random FI

=== Post-analysis

== References
